# -*- coding: utf-8 -*-
"""catsanddogsVGG16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a5b-AU4d8LDEkIVeHD6EC8iL3WOwp74F
"""



import numpy as np
import os
import keras
import tensorflow as tf
from keras import layers
from tensorflow import data as tf_data
import matplotlib.pyplot as plt
from tensorflow.keras.models import load_model

!mkdir dataset
os.chdir("dataset")

!pwd

!curl -L -o dataset.zip https://www.kaggle.com/api/v1/datasets/download/aleemaparakatta/cats-and-dogs-mini-dataset
!unzip -q dataset.zip
!ls

os.chdir("..")

num_skipped = 0
for folder_name in ("cats_set", "dogs_set"):
  folder_path = os.path.join("dataset", folder_name)
  for fname in os.listdir(folder_path):
    fpath = os.path.join(folder_path, fname)
    try:
      fobj = open(fpath, "rb")
      is_jfif = b"JFIF" in fobj.peek(10)
    finally:
      fobj.close()

    if not is_jfif:
      num_skipped += 1
      os.remove(fpath)

print(f"Deleted {num_skipped} images.")

import tensorflow as tf
from tensorflow.keras.preprocessing import image_dataset_from_directory

BATCH_SIZE = 32
IMG_SIZE = (224, 224)

train_dataset = image_dataset_from_directory(
    "dataset",
    validation_split=0.2,
    subset="training",
    seed=123,
    image_size=IMG_SIZE,
    batch_size=BATCH_SIZE
)

val_dataset = image_dataset_from_directory(
    "dataset",
    validation_split=0.2,
    subset="validation",
    seed=123,
    image_size=IMG_SIZE,
    batch_size=BATCH_SIZE
)

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras import layers, models

base_model = MobileNetV2(weights="imagenet", include_top=False, input_shape=(224, 224, 3))
base_model.trainable = False  # Congela os pesos do modelo pré-treinado

model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(128, activation="relu"),
    layers.Dropout(0.5),
    layers.Dense(1, activation="sigmoid")  # Saída binária (0 = gato, 1 = cachorro)
])

model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

# Treinamento
model.fit(train_dataset, validation_data=val_dataset, epochs=5)

model.save("modelo_cachorro_gato.h5")

!pip install streamlit tensorflow pillow

import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.applications.vgg16 import preprocess_input
import numpy as np
from PIL import Image

# Carregar modelo treinado
model = load_model("modelo_cachorro_gato.h5")

# Interface do Usuário
st.title("Classificador de Gatos e Cachorros 🐶🐱")
uploaded_file = st.file_uploader("Envie uma imagem...", type=["jpg", "png", "jpeg"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Imagem carregada", use_column_width=True)

    # Preprocessamento
    img = image.resize((224, 224))
    img_array = np.array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    # Predição
    prediction = model.predict(img_array)
    label = "Cachorro 🐶" if prediction[0][0] >= 0.5 else "Gato 🐱"

    st.write(f"### Resultado: {label}")

keras.applications.VGG16(
    include_top=True,
    weights="imagenet",
    input_tensor=None,
    input_shape=None,
    pooling=None,
    classes=1000,
    classifier_activation="softmax",
    name="vgg16",
)